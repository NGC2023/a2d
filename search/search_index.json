{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"a2d - APRS to DAPNET portal a2d is an application for transmitting APRS messages to DAPNET pagers, dedicated to the HAM radio community usage. Description a2d utilizes the APRS API to retrieve APRS messages for a callsign and relays them to DAPNET for delivery to your pager device. It supports multiple SSIDs. Prerequisites Ham Radio License: Ensure you hold a valid HAM radio license with a callsign. Transmitting signals complies with license regulations and local laws. APRS API Key: Register on aprs.fi with your callsign to generate a confidential API Key for downloading APRS messages. Keep this key private. DAPNET User and Password: Create a secure account on hampager.de for DAPNET. Additional steps may be required if you don't have an approved DAPNET pager or transmitter. Debian System with Internet Connection : For optimal performance and convenience in HAM Radio applications, especially if you prefer a compact, standalone setup with internet access, we recommend using a Raspberry Pi. The Raspberry Pi offers a cost-effective solution that's well-suited for these purposes. Compatibility Debian 12 : a2d has been thoroughly tested on Debian 12. Debian 12 (VMware) : Tested on Debian 12 within a VMware environment. Raspberry Pi OS with Debian 12 (bookworm) : Tested on Raspberry Pi OS with Debian version 12 (bookworm). You can utilize various packages like VNC or SSH to set up your Raspberry Pi even if you intend to run it headlessly (without a physical display). This approach provides flexibility while maintaining a small footprint, making it a versatile choice for HAM Radio enthusiasts.","title":"Home"},{"location":"index.html#a2d-aprs-to-dapnet-portal","text":"a2d is an application for transmitting APRS messages to DAPNET pagers, dedicated to the HAM radio community usage.","title":"a2d - APRS to DAPNET portal"},{"location":"index.html#description","text":"a2d utilizes the APRS API to retrieve APRS messages for a callsign and relays them to DAPNET for delivery to your pager device. It supports multiple SSIDs.","title":"Description"},{"location":"index.html#prerequisites","text":"Ham Radio License: Ensure you hold a valid HAM radio license with a callsign. Transmitting signals complies with license regulations and local laws. APRS API Key: Register on aprs.fi with your callsign to generate a confidential API Key for downloading APRS messages. Keep this key private. DAPNET User and Password: Create a secure account on hampager.de for DAPNET. Additional steps may be required if you don't have an approved DAPNET pager or transmitter. Debian System with Internet Connection : For optimal performance and convenience in HAM Radio applications, especially if you prefer a compact, standalone setup with internet access, we recommend using a Raspberry Pi. The Raspberry Pi offers a cost-effective solution that's well-suited for these purposes.","title":"Prerequisites"},{"location":"index.html#compatibility","text":"Debian 12 : a2d has been thoroughly tested on Debian 12. Debian 12 (VMware) : Tested on Debian 12 within a VMware environment. Raspberry Pi OS with Debian 12 (bookworm) : Tested on Raspberry Pi OS with Debian version 12 (bookworm). You can utilize various packages like VNC or SSH to set up your Raspberry Pi even if you intend to run it headlessly (without a physical display). This approach provides flexibility while maintaining a small footprint, making it a versatile choice for HAM Radio enthusiasts.","title":"Compatibility"},{"location":"ack.html","text":"We would like to express our gratitude to the open-source community and the following projects for their contributions, support, and resources that have made a2d possible: Python : The Python programming language has served as the backbone of our project, providing a powerful and versatile platform for development. Website: https://www.python.org/ Bootstrap : Bootstrap has been an integral part of our UI design, enabling seamless and responsive HTML and JS components. We use Bootstrap for light and dark mode switching for the UI. Website: https://getbootstrap.com/ Cryptography : The Cryptography library has played a crucial role in ensuring the secure handling and encryption of sensitive data within our project. Requests : The Requests library has greatly simplified the process of making HTTP requests and interacting with external APIs, enhancing the functionality of our project. Gunicorn : We are grateful to Gunicorn for providing an efficient and reliable WSGI server that powers our Flask web app. Website: https://gunicorn.org/ Flask : Flask has been the foundation of our web app, allowing us to create a user-friendly and feature-rich interface for a2d. Website: https://flask.palletsprojects.com/ Python3-crontab : Python3-crontab has been instrumental in managing our cron jobs, ensuring timely and efficient execution of scheduled tasks. Website: https://pypi.org/project/python-crontab/ Nginx : Our project benefits from the powerful and efficient web server capabilities provided by Nginx. We are grateful to the Nginx community for developing and maintaining this essential software. Website: https://www.nginx.com/ Certbot (Let's Encrypt) : The integration of SSL certificate management into our project has been made possible by Certbot, an integral part of Let's Encrypt. We extend our thanks to the Certbot team and Let's Encrypt for simplifying and securing the SSL certificate process. Website: https://certbot.eff.org/ Website: https://letsencrypt.org/ python3-psutil : Monitoring and managing system resources is critical for our project, and python3-psutil has been an indispensable tool for this purpose. We would like to thank the python3-psutil developers for their excellent work in creating this Python library. Google Icons : We acknowledge the use of Google Icons (icon sets), which have been utilized to enhance the visual elements of our project. These icons contribute to the overall user experience and user interface design. Website: https://fonts.google.com/icons We would also like to extend our appreciation to the following organizations for their APIs and continuous support for the ham radio community: hampager.de : We are grateful for the hampager.de API, which has enabled seamless integration with the DAPNET, and for their continued support of the ham radio community. Website: https://hampager.de/ aprs.fi : We would like to thank aprs.fi for their API, which has provided valuable APRS data and resources, and for their ongoing commitment to supporting the ham radio community. Website: https://aprs.fi/ We appreciate the support and contributions from the open-source community, as well as hampager.de and aprs.fi. Their work has significantly contributed to the development and success of a2d. If we have inadvertently missed acknowledging someone's contribution, please accept our apologies, and kindly inform us so that we can rectify the oversight. Thank you to all the projects, organizations, and the open-source community for their valuable contributions to a2d.","title":"Acknowledgements"},{"location":"authors.html","text":"The following individuals and entities have contributed to the development of a2d: NGC2023 (NY3W): Identified the need for the program, designed and implemented the program architecture, and developed the core functionality. Collaborated with team members to gather requirements and ensure the program met the desired specifications. Conducted thorough testing and debugging to ensure the program's reliability and functionality. GitHub: https://github.com/NGC2023/a2d OpenAI (represented by ChatGPT): OpenAI's ChatGPT played a crucial role in providing intelligent responses, language processing, and assisting with various aspects of the project's development and implementation. Website: https://chat.openai.com/ pbhus: Part of logic design and python coding GitHub: https://github.com/pbhus We appreciate the time and effort these individuals and entities have dedicated to the project. Their contributions have been invaluable in shaping the features, fixing bugs, and improving the overall quality of a2d. If we have inadvertently missed mentioning someone's contribution, please accept our apologies, and kindly inform us so that we can rectify the oversight. Thank you to all the authors who have made a2d possible.","title":"Authors and Contributors"},{"location":"authors.html#ngc2023-ny3w","text":"Identified the need for the program, designed and implemented the program architecture, and developed the core functionality. Collaborated with team members to gather requirements and ensure the program met the desired specifications. Conducted thorough testing and debugging to ensure the program's reliability and functionality. GitHub: https://github.com/NGC2023/a2d","title":"NGC2023 (NY3W):"},{"location":"authors.html#openai-represented-by-chatgpt","text":"OpenAI's ChatGPT played a crucial role in providing intelligent responses, language processing, and assisting with various aspects of the project's development and implementation. Website: https://chat.openai.com/","title":"OpenAI (represented by ChatGPT):"},{"location":"authors.html#pbhus","text":"Part of logic design and python coding GitHub: https://github.com/pbhus We appreciate the time and effort these individuals and entities have dedicated to the project. Their contributions have been invaluable in shaping the features, fixing bugs, and improving the overall quality of a2d. If we have inadvertently missed mentioning someone's contribution, please accept our apologies, and kindly inform us so that we can rectify the oversight. Thank you to all the authors who have made a2d possible.","title":"pbhus:"},{"location":"changes.html","text":"All notable changes to a2d will be documented in this file. [Version 2.0.5] - 2024-07-21 Change Created new documentation using MkDocs. Linked the App Info section to the new documentation. [Version 2.0.4] - 2024-07-17 Change Included tests for a2d. Updated dependencies in pyproject.toml. Set default port number in a2d.desktop to 9333. Removal Removed nginx and certbot as hard dependencies. [Version 2.0.3] - 2023-10-27 Change Transition to a consolidated single Python package approach. [Version 2.0.1] - 2023-10-09 Feature Message counts added to APRS to DAPNET Transmit logs. Change Optimized multicore processing for dual-core processors, like the Raspberry Pi Zero 2 W. Security fix Implemented yaml safe_load instead of pickle for a2d configuration backup. [Version 2.0.0] - 2023-09-01 Feature Introduced a user-friendly Flask web app to enhance the a2d experience. The UI now displays a2d status and message logs. Implemented both light and dark modes for a visually appealing user interface. Enhanced security with PIN access protected by a Passphrase for the UI. Users can now back up and restore a2d configurations conveniently. Added an Instructions section to guide users within the UI. Implemented an automatic logout feature after 30 min of inactivity. Introduced automated APRS fetch interval management to prevent APRS account lock. Users can now access listen port, server name, and manage SSL certificates (self-signed and CA). Introduced an option to select a2d default settings. Implemented a factory reset feature for a2d, users can retain SSL certificates. Enhanced server status UI with all status including SSL and certificate in use. Added network health monitoring to track round trip time (RTT) to APRS and DAPNET servers. Included clear notifications and feedback messages in the UI based on user interactions. Change Accelerated data processing by utilizing multiprocessing for efficient multicore utilization. Consolidated multiple system services into a single, resource-efficient system service. Streamlined installation by transitioning from the pip repository to the apt repository for dependencies. Improved session management with the introduction of the auto logout feature. Enhanced database read/write operations and implemented self-healing mechanisms if data corruption occurs. Deprecation Deprecated the use of terminal and SSH commands for setting up and running a2d. Removal Eliminated terminal access to user data, replacing it with the new web app interface. Removed a2d_core services, adopting a more efficient cron job-based approach to improved efficiency and resource usage. Bug fix Addressed an issue where the database was being unnecessarily written during each run. Resolved database corruption in specific scenarios. Prevented message loss due to frequent APRS fetch by introducing automated APRS fetch interval management. Security fix Implemented safeguards to prevent flooding bulk messages to DAPNET during the initial run. Optimized data transfer from ARPS for improved efficiency. Strengthened data transfer to DAPNET with enhanced error handlingfor incorrect credentials. [Version 1.0.0] - 2023-06-23 Feature Added a user-friendly input method for gathering user information and configuring a2d. Change Enhanced security by implementing encryption for user information. Bug fix Resolved the issue where callsign 0 was incorrectly representing the SSID.","title":"Change Log"},{"location":"changes.html#version-205-2024-07-21","text":"","title":"[Version 2.0.5] - 2024-07-21"},{"location":"changes.html#change","text":"Created new documentation using MkDocs. Linked the App Info section to the new documentation.","title":"Change"},{"location":"changes.html#version-204-2024-07-17","text":"","title":"[Version 2.0.4] - 2024-07-17"},{"location":"changes.html#change_1","text":"Included tests for a2d. Updated dependencies in pyproject.toml. Set default port number in a2d.desktop to 9333.","title":"Change"},{"location":"changes.html#removal","text":"Removed nginx and certbot as hard dependencies.","title":"Removal"},{"location":"changes.html#version-203-2023-10-27","text":"","title":"[Version 2.0.3] - 2023-10-27"},{"location":"changes.html#change_2","text":"Transition to a consolidated single Python package approach.","title":"Change"},{"location":"changes.html#version-201-2023-10-09","text":"","title":"[Version 2.0.1] - 2023-10-09"},{"location":"changes.html#feature","text":"Message counts added to APRS to DAPNET Transmit logs.","title":"Feature"},{"location":"changes.html#change_3","text":"Optimized multicore processing for dual-core processors, like the Raspberry Pi Zero 2 W.","title":"Change"},{"location":"changes.html#security-fix","text":"Implemented yaml safe_load instead of pickle for a2d configuration backup.","title":"Security fix"},{"location":"changes.html#version-200-2023-09-01","text":"","title":"[Version 2.0.0] - 2023-09-01"},{"location":"changes.html#feature_1","text":"Introduced a user-friendly Flask web app to enhance the a2d experience. The UI now displays a2d status and message logs. Implemented both light and dark modes for a visually appealing user interface. Enhanced security with PIN access protected by a Passphrase for the UI. Users can now back up and restore a2d configurations conveniently. Added an Instructions section to guide users within the UI. Implemented an automatic logout feature after 30 min of inactivity. Introduced automated APRS fetch interval management to prevent APRS account lock. Users can now access listen port, server name, and manage SSL certificates (self-signed and CA). Introduced an option to select a2d default settings. Implemented a factory reset feature for a2d, users can retain SSL certificates. Enhanced server status UI with all status including SSL and certificate in use. Added network health monitoring to track round trip time (RTT) to APRS and DAPNET servers. Included clear notifications and feedback messages in the UI based on user interactions.","title":"Feature"},{"location":"changes.html#change_4","text":"Accelerated data processing by utilizing multiprocessing for efficient multicore utilization. Consolidated multiple system services into a single, resource-efficient system service. Streamlined installation by transitioning from the pip repository to the apt repository for dependencies. Improved session management with the introduction of the auto logout feature. Enhanced database read/write operations and implemented self-healing mechanisms if data corruption occurs.","title":"Change"},{"location":"changes.html#deprecation","text":"Deprecated the use of terminal and SSH commands for setting up and running a2d.","title":"Deprecation"},{"location":"changes.html#removal_1","text":"Eliminated terminal access to user data, replacing it with the new web app interface. Removed a2d_core services, adopting a more efficient cron job-based approach to improved efficiency and resource usage.","title":"Removal"},{"location":"changes.html#bug-fix","text":"Addressed an issue where the database was being unnecessarily written during each run. Resolved database corruption in specific scenarios. Prevented message loss due to frequent APRS fetch by introducing automated APRS fetch interval management.","title":"Bug fix"},{"location":"changes.html#security-fix_1","text":"Implemented safeguards to prevent flooding bulk messages to DAPNET during the initial run. Optimized data transfer from ARPS for improved efficiency. Strengthened data transfer to DAPNET with enhanced error handlingfor incorrect credentials.","title":"Security fix"},{"location":"changes.html#version-100-2023-06-23","text":"","title":"[Version 1.0.0] - 2023-06-23"},{"location":"changes.html#feature_2","text":"Added a user-friendly input method for gathering user information and configuring a2d.","title":"Feature"},{"location":"changes.html#change_5","text":"Enhanced security by implementing encryption for user information.","title":"Change"},{"location":"changes.html#bug-fix_1","text":"Resolved the issue where callsign 0 was incorrectly representing the SSID.","title":"Bug fix"},{"location":"install.html","text":"a2d is designed with a web UI. Install a2d You can install a2d from GitHub Packages. Download the Debian package from a2d GitHub Releases . Navigate to the directory where you downloaded the Debian package using the command line and run the following command: sudo apt install -y ./<a2d package>.deb sudo apt install -y ./<a2d-doc package>.deb Replace a2d_package_version.deb with the a2d file name you downloaded before running this command. To enable access to a2d over the network from another system, it is suggested to install additional packages like nginx and certbot. While the a2d interface supports any reverse proxy and HTTP server, it provides options for limited management of nginx. However, please note that nginx is not installed by default. If you choose to use nginx, you will need to install and can configure via a2d. To create and maintain CA SSL certificates, certbot is required. certbot is not installed by default but is essential for generating CA SSL certificates and managing them automatically. The a2d interface works with certbot to handle SSLs related to a2d. Install nginx and certbot: sudo apt update sudo apt install <package> Uninstall a2d To uninstall a2d, follow these steps. For a thorough removal of user configuration files, it is advisable to uninstall the application after performing a Factory Reset in the a2d portal (Check Resetting a2d portal section). This ensures a clean removal of user-specific settings. sudo apt purge a2d However, please note that this command won't remove the core nginx server and other dependencies that were installed alongside a2d. To completely remove all a2d dependencies, you can use the following commands: Warning: Removing dependencies may adversely impact other applications using the dependencies. If you using nginx server for other applications or you using it as a webserver, DO NOT remove nginx. Removing nginx and its associated files: sudo apt -y remove --purge nginx nginx-common nginx-full nginx-core Remove nginx configuration files: sudo rm -rf /etc/nginx Remove nginx default configuration: sudo rm -rf /etc/default/nginx Remove nginx init.d script: sudo rm -rf /etc/init.d/nginx Remove nginx log files: sudo rm -rf /var/log/nginx Finally, perform an autoremove to clean up any remaining dependencies: sudo apt autoremove Python 3 and Other Dependencies: Ensure that Python 3 is available in your system to run a2d. All the required dependencies will be automatically installed during the a2d installation process. However, if you encounter any errors related to dependencies during the a2d installation, please make sure the following packages are available on your system in addition to Python 3: python3-cryptography python3-requests python3-flask python3-gunicorn python3-psutil python3-yaml nginx (not default installation, suggested for remote access) certbot (not default installation, suggested for remote access) Gunicorn serves as the WSGI server that powers the a2d user interface, while Nginx is used as a reverse proxy server. Certbot is essential for creating and maintaining the required SSL certificates. If you prefer to install dependencies manually, you can use the following commands to install from the apt repository: sudo apt update sudo apt install <package> If you encounter any issues during installation, you can try running: sudo apt --fix-broken install This will help resolve any broken dependencies and ensure that a2d operates smoothly on your system.","title":"Installation"},{"location":"install.html#install-a2d","text":"You can install a2d from GitHub Packages. Download the Debian package from a2d GitHub Releases . Navigate to the directory where you downloaded the Debian package using the command line and run the following command: sudo apt install -y ./<a2d package>.deb sudo apt install -y ./<a2d-doc package>.deb Replace a2d_package_version.deb with the a2d file name you downloaded before running this command. To enable access to a2d over the network from another system, it is suggested to install additional packages like nginx and certbot. While the a2d interface supports any reverse proxy and HTTP server, it provides options for limited management of nginx. However, please note that nginx is not installed by default. If you choose to use nginx, you will need to install and can configure via a2d. To create and maintain CA SSL certificates, certbot is required. certbot is not installed by default but is essential for generating CA SSL certificates and managing them automatically. The a2d interface works with certbot to handle SSLs related to a2d. Install nginx and certbot: sudo apt update sudo apt install <package>","title":"Install a2d"},{"location":"install.html#uninstall-a2d","text":"To uninstall a2d, follow these steps. For a thorough removal of user configuration files, it is advisable to uninstall the application after performing a Factory Reset in the a2d portal (Check Resetting a2d portal section). This ensures a clean removal of user-specific settings. sudo apt purge a2d However, please note that this command won't remove the core nginx server and other dependencies that were installed alongside a2d. To completely remove all a2d dependencies, you can use the following commands: Warning: Removing dependencies may adversely impact other applications using the dependencies. If you using nginx server for other applications or you using it as a webserver, DO NOT remove nginx. Removing nginx and its associated files: sudo apt -y remove --purge nginx nginx-common nginx-full nginx-core Remove nginx configuration files: sudo rm -rf /etc/nginx Remove nginx default configuration: sudo rm -rf /etc/default/nginx Remove nginx init.d script: sudo rm -rf /etc/init.d/nginx Remove nginx log files: sudo rm -rf /var/log/nginx Finally, perform an autoremove to clean up any remaining dependencies: sudo apt autoremove","title":"Uninstall a2d"},{"location":"install.html#python-3-and-other-dependencies","text":"Ensure that Python 3 is available in your system to run a2d. All the required dependencies will be automatically installed during the a2d installation process. However, if you encounter any errors related to dependencies during the a2d installation, please make sure the following packages are available on your system in addition to Python 3: python3-cryptography python3-requests python3-flask python3-gunicorn python3-psutil python3-yaml nginx (not default installation, suggested for remote access) certbot (not default installation, suggested for remote access) Gunicorn serves as the WSGI server that powers the a2d user interface, while Nginx is used as a reverse proxy server. Certbot is essential for creating and maintaining the required SSL certificates. If you prefer to install dependencies manually, you can use the following commands to install from the apt repository: sudo apt update sudo apt install <package> If you encounter any issues during installation, you can try running: sudo apt --fix-broken install This will help resolve any broken dependencies and ensure that a2d operates smoothly on your system.","title":"Python 3 and Other Dependencies:"},{"location":"lic.html","text":"MIT License Copyright (c) 2023 NGC2023 a2d/static/bootstrap/css/cdn_bootstrap_5-3_min.css Copyright: 2011-2023 The Bootstrap Authors License: MIT a2d/static/bootstrap/js/cdn_bootstrap_5-3.js Copyright: 2011-2023 The Bootstrap Authors License: MIT Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. CC-BY-3.0 License a2d/static/bootstrap/css/bootstrap_docs_5-3.css Copyright: 2011-2023 The Bootstrap Authors License: CC-BY-3.0 a2d/static/bootstrap/js/bootstrap_5-3_mode.js Copyright: 2011-2023 The Bootstrap Authors License: CC-BY-3.0 We have made modifications to a portion of the Bootstrap code to suit our project's requirements. These minor modifications enable the Color mode toggler from Bootstrap's docs to work with a2d. Licensed under the Creative Commons Attribution 3.0 Unported License. For details, see https://creativecommons.org/licenses/by/3.0/ .","title":"License"},{"location":"lic.html#mit-license","text":"Copyright (c) 2023 NGC2023 a2d/static/bootstrap/css/cdn_bootstrap_5-3_min.css Copyright: 2011-2023 The Bootstrap Authors License: MIT a2d/static/bootstrap/js/cdn_bootstrap_5-3.js Copyright: 2011-2023 The Bootstrap Authors License: MIT Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"lic.html#cc-by-30-license","text":"a2d/static/bootstrap/css/bootstrap_docs_5-3.css Copyright: 2011-2023 The Bootstrap Authors License: CC-BY-3.0 a2d/static/bootstrap/js/bootstrap_5-3_mode.js Copyright: 2011-2023 The Bootstrap Authors License: CC-BY-3.0 We have made modifications to a portion of the Bootstrap code to suit our project's requirements. These minor modifications enable the Color mode toggler from Bootstrap's docs to work with a2d. Licensed under the Creative Commons Attribution 3.0 Unported License. For details, see https://creativecommons.org/licenses/by/3.0/ .","title":"CC-BY-3.0 License"},{"location":"usage/access.html","text":"Once a2d is installed, open a web browser in the same computer and visit http://localhost:9333 or http://ipaddress:9333 The default a2d communication port is 9333 over http. If you installed nginx then the port is 9331 (local and remote). Alternatively, you can access the a2d portal directly from the application list on your Linux GUI desktop after installing a2d. Register PIN and Passphrase Security is paramount in the a2d portal. Here's how to safeguard your access: PIN Registration: Choose a personalized six-digit PIN. If this is your first time, select \"Register\" on the login page to set your 6-digit PIN and Passphrase. Logging In: After registration, use your assigned PIN to log in. The login session will automatically expire after 20 minutes of inactivity, ensuring the security of your data. PIN Recovery: If you forget your PIN, use your Passphrase to create a new one. Click \"Forgot PIN!\" on the login page, verify with your Passphrase, and proceed to set a new PIN. Note: There's no Passphrase reset option. Removing and Reinstalling the a2d portal is the only recourse to reset your Passphrase (Warning: You will loose all your a2d data). After uninstalling a2d, please use the following command to remove any existing user configuration files before proceeding with the reinstallation. sudo rm -r /etc/a2d","title":"Access a2d UI"},{"location":"usage/access.html#register-pin-and-passphrase","text":"Security is paramount in the a2d portal. Here's how to safeguard your access: PIN Registration: Choose a personalized six-digit PIN. If this is your first time, select \"Register\" on the login page to set your 6-digit PIN and Passphrase. Logging In: After registration, use your assigned PIN to log in. The login session will automatically expire after 20 minutes of inactivity, ensuring the security of your data. PIN Recovery: If you forget your PIN, use your Passphrase to create a new one. Click \"Forgot PIN!\" on the login page, verify with your Passphrase, and proceed to set a new PIN. Note: There's no Passphrase reset option. Removing and Reinstalling the a2d portal is the only recourse to reset your Passphrase (Warning: You will loose all your a2d data). After uninstalling a2d, please use the following command to remove any existing user configuration files before proceeding with the reinstallation. sudo rm -r /etc/a2d","title":"Register PIN and Passphrase"},{"location":"usage/dash.html","text":"Navigation Bar: Provides convenient links and icons for easy access to various sections such as Server, Mode (Light, Dark, and Auto), Options, and Logout. The Options section includes Configuration, Advanced Options, Backup/Restore Configuration, Change PIN, and Information. Dashboard: Displays Callsign, a2d Status, Run Interval, Last Run, Destination SSIDs. Start/Stop Relay buttons. System Health: Displays CPU temperature, Memory usage, and CPU Load. APRS to DAPNET Transmits: Shows logs of APRS to DAPNET transmitted messages. a2d app offers three screen modes with Bootstrap v5.3 support: Light, Dark, and Auto. Light Mode: Provides a clean and bright interface for comfortable usage. Dark Mode: Offers a sleek, darker interface that's easy on the eyes, especially in low-light conditions. Auto Mode: Adapts to your local system settings, ensuring a seamless experience that aligns with your device's theme. Choose the mode that suits your preferences and enhances your interaction with the a2d app. Setup Configuration If it's your first time, the dashboard will show 'Setup Configuration' instead of your Callsign. Click \"Configuration\" listed in options in the navigation bar to begin. To complete setup: Enter your HAM radio callsign in ALL CAPS without any SSID for Callsign (no ssid). Input your APRS API Key from aprs.fi . Provide your DAPNET account username and password. Include your DAPNET transmitter group code. Each DAPNET transmitter belongs to a specific group. Find your code during transmitter configuration. You can find your transmitter group code when setting up your transmitter at hampager.de . Click \"Set Config\" to save. Note : Your data is securely encrypted. In case of security concerns, regenerate keys on respective websites and change passwords. Start/Stop Relay Important: Setup Configuration before pressing 'Start Relay' button. After configuring, click \"Start Relay\" to begin and \"Stop Relay\" in the dashboard to halt. The interval between each APRS to DAPNET transfer is managed by the crontab manager in your system. For example, if the transfer interval is set to 15 min, cron will trigger the transfer at 0, 15, 30, and 45 min past the hour. a2d is designed to transfer only APRS messages received after its first run, preventing flooding DAPNET with a large number of messages all at once. Advanced Options Note: APRS servers block requests under 2 min. Please set intervals > 5 min for optimal performance. If needed, modify in \"Advanced Options\" via \"Options\" in the navigation bar and selecting \"Advanced.\" Interval: Set retrieval frequency. Default is 15 minutes. Avoid very short intervals (below 5 min). Preferred APRS SSIDs: Define target SSIDs for messages. -0 is your callsign without SSID. Find HAM APRS SSIDs on APRS SSID list . Transmit logs: Set displayed logs on dashboard. Backup/Restore Configuration Once you've set up your a2d configuration, you can use the Backup/Restore in the navigation bar to safeguard your settings. Both actions\u2014backup and restore\u2014require Passphrase verification. Backup: Create a backup of your a2d configuration files. The backup file's name will be \"a2d_config_backup.bin.\" This file is encoded binary and holds your API credentials. Store it securely. Restore: If you want to revert to a previous configuration, use the backup file to restore. However, be cautious. If the bin file has been tampered with, the restore won't work, and using a modified bin file is strongly discouraged. Note: Safeguard your settings with backups and restorations, but secure your bin file from unauthorized access and exercise caution to maintain the integrity of your a2d configuration. Errors while Backup/Restore: Invalid Passphrase: Retry with the correct Passphrase. Configuration files missing: Set up Configuration. Invalid file: During restore configuration, use the correct a2d_config_backup.bin file. Configuration file tampered: If you spot this, avoid using the modified file as it could harm the a2d app.","title":"Dashboard Overview"},{"location":"usage/dash.html#setup-configuration","text":"If it's your first time, the dashboard will show 'Setup Configuration' instead of your Callsign. Click \"Configuration\" listed in options in the navigation bar to begin. To complete setup: Enter your HAM radio callsign in ALL CAPS without any SSID for Callsign (no ssid). Input your APRS API Key from aprs.fi . Provide your DAPNET account username and password. Include your DAPNET transmitter group code. Each DAPNET transmitter belongs to a specific group. Find your code during transmitter configuration. You can find your transmitter group code when setting up your transmitter at hampager.de . Click \"Set Config\" to save. Note : Your data is securely encrypted. In case of security concerns, regenerate keys on respective websites and change passwords.","title":"Setup Configuration"},{"location":"usage/dash.html#startstop-relay","text":"Important: Setup Configuration before pressing 'Start Relay' button. After configuring, click \"Start Relay\" to begin and \"Stop Relay\" in the dashboard to halt. The interval between each APRS to DAPNET transfer is managed by the crontab manager in your system. For example, if the transfer interval is set to 15 min, cron will trigger the transfer at 0, 15, 30, and 45 min past the hour. a2d is designed to transfer only APRS messages received after its first run, preventing flooding DAPNET with a large number of messages all at once.","title":"Start/Stop Relay"},{"location":"usage/dash.html#advanced-options","text":"Note: APRS servers block requests under 2 min. Please set intervals > 5 min for optimal performance. If needed, modify in \"Advanced Options\" via \"Options\" in the navigation bar and selecting \"Advanced.\" Interval: Set retrieval frequency. Default is 15 minutes. Avoid very short intervals (below 5 min). Preferred APRS SSIDs: Define target SSIDs for messages. -0 is your callsign without SSID. Find HAM APRS SSIDs on APRS SSID list . Transmit logs: Set displayed logs on dashboard.","title":"Advanced Options"},{"location":"usage/dash.html#backuprestore-configuration","text":"Once you've set up your a2d configuration, you can use the Backup/Restore in the navigation bar to safeguard your settings. Both actions\u2014backup and restore\u2014require Passphrase verification. Backup: Create a backup of your a2d configuration files. The backup file's name will be \"a2d_config_backup.bin.\" This file is encoded binary and holds your API credentials. Store it securely. Restore: If you want to revert to a previous configuration, use the backup file to restore. However, be cautious. If the bin file has been tampered with, the restore won't work, and using a modified bin file is strongly discouraged. Note: Safeguard your settings with backups and restorations, but secure your bin file from unauthorized access and exercise caution to maintain the integrity of your a2d configuration.","title":"Backup/Restore Configuration"},{"location":"usage/dash.html#errors-while-backuprestore","text":"Invalid Passphrase: Retry with the correct Passphrase. Configuration files missing: Set up Configuration. Invalid file: During restore configuration, use the correct a2d_config_backup.bin file. Configuration file tampered: If you spot this, avoid using the modified file as it could harm the a2d app.","title":"Errors while Backup/Restore:"},{"location":"usage/err.html","text":"Error messages play a crucial role in guiding you through issues. They appear in two places: 1. Service Status Container in the Dashboard If you encounter any of these errors, you'll see them next to \"Status\" in the Service Status container. To resolve, ensure accurate information in your configuration and restart the service. Invalid APRS API key Incorrect APRS API key Incorrect DAPNET username or password Incorrect DAPNET callsign or txgroup DAPNET-related errors appear only when a new APRS message is received and a2d attempts to transmit it to DAPNET. 2. Error Messages Triggered by Click on the Dashboard For these errors, you'll see messages upon clicking. Solutions are provided below: Invalid PIN: Retry with the correct PIN. Invalid Passphrase: Retry with the correct Passphrase. Configuration files missing: Set up Configuration. Invalid file: During restore configuration, use the correct a2d_config_backup.bin file. Configuration file tampered: If you spot this, avoid using the modified file as it could harm the a2d app. 3. Error Messages during Server Settings and SSL Certificates Create Self-Signed SSL Certificate before Enabling: Ensure that you have created the required SSL certificates before configuring the server for SSL. Server and Common Name Mismatch: Verify that your server name matches the Common Name (CN) of the certificate and corresponds to your domain name. CA SSL Certificate Already Exists: Try deleting the CA SSL certificate before attempting to create a duplicate certificate. CA SSL Does Not Exist: The SSL certificate you are trying to delete does not exist. Try refreshing the page. Selected CA SSL or Server Name in Use: Do not delete an SSL certificate while it is in use. First, change the SSL settings in the server, and then attempt to delete it. Unknown Response from the Server: This issue could be due to network problems, firewall blocking specific ports, or reaching Let's Encrypt's SSL certificate limits. Failed to Update Server: Your server may be offline or unreachable. Other Unknown Errors and Troubleshooting: If new messages aren't reaching your DAPNET pager: Potential Causes: Too frequent APRS requests, or issues with APRS or DAPNET servers. Resolution: Confirm server functionality and your Configuration setup. If the problem persists, wait for a couple of runs, as a2d self-heals the database. If the issue continues, reinstall a2d to fix message database corruption. Database corruption may occur during message read/write interruptions, such as power outages, memory loss, or system failures.","title":"Error Messages"},{"location":"usage/err.html#1-service-status-container-in-the-dashboard","text":"If you encounter any of these errors, you'll see them next to \"Status\" in the Service Status container. To resolve, ensure accurate information in your configuration and restart the service. Invalid APRS API key Incorrect APRS API key Incorrect DAPNET username or password Incorrect DAPNET callsign or txgroup DAPNET-related errors appear only when a new APRS message is received and a2d attempts to transmit it to DAPNET.","title":"1. Service Status Container in the Dashboard"},{"location":"usage/err.html#2-error-messages-triggered-by-click-on-the-dashboard","text":"For these errors, you'll see messages upon clicking. Solutions are provided below: Invalid PIN: Retry with the correct PIN. Invalid Passphrase: Retry with the correct Passphrase. Configuration files missing: Set up Configuration. Invalid file: During restore configuration, use the correct a2d_config_backup.bin file. Configuration file tampered: If you spot this, avoid using the modified file as it could harm the a2d app.","title":"2. Error Messages Triggered by Click on the Dashboard"},{"location":"usage/err.html#3-error-messages-during-server-settings-and-ssl-certificates","text":"Create Self-Signed SSL Certificate before Enabling: Ensure that you have created the required SSL certificates before configuring the server for SSL. Server and Common Name Mismatch: Verify that your server name matches the Common Name (CN) of the certificate and corresponds to your domain name. CA SSL Certificate Already Exists: Try deleting the CA SSL certificate before attempting to create a duplicate certificate. CA SSL Does Not Exist: The SSL certificate you are trying to delete does not exist. Try refreshing the page. Selected CA SSL or Server Name in Use: Do not delete an SSL certificate while it is in use. First, change the SSL settings in the server, and then attempt to delete it. Unknown Response from the Server: This issue could be due to network problems, firewall blocking specific ports, or reaching Let's Encrypt's SSL certificate limits. Failed to Update Server: Your server may be offline or unreachable.","title":"3. Error Messages during Server Settings and SSL Certificates"},{"location":"usage/err.html#other-unknown-errors-and-troubleshooting","text":"If new messages aren't reaching your DAPNET pager: Potential Causes: Too frequent APRS requests, or issues with APRS or DAPNET servers. Resolution: Confirm server functionality and your Configuration setup. If the problem persists, wait for a couple of runs, as a2d self-heals the database. If the issue continues, reinstall a2d to fix message database corruption. Database corruption may occur during message read/write interruptions, such as power outages, memory loss, or system failures.","title":"Other Unknown Errors and Troubleshooting:"},{"location":"usage/msg.html","text":"DAPNET paging messages are limited to 80 characters per message. To conserve space, a2d messages follow the structure given below and will be delivered to your pager: SourceCall (DestinationSSID): Message SourceCall: The sender's callsign. DestinationSSID: Your callsign's SSID. Message: The message content. Example : NY3W-5(7): Hello OM! Here, NY3W is the sender's callsign, 7 is the SSID of the receiver's (your) callsign (e.g., NY3W-7), and Hello OM! is the message. If the DestinationSSID displays 0, it means the message is targeted for your callsign without any SSID.","title":"Message Structure"},{"location":"usage/srv.html","text":"a2d offers server settings and advanced options for users who want to customize their server. Make changes cautiously. You can use a2d with its default settings for local access. If you want to access a2d from outside your network, you can do so by making careful adjustments to your router's firewall settings. Server Page Overview Navigation Bar: Convenient links and icons for easy navigation are available, allowing you to access sections like Dashboard, Mode (Light, Dark, and Auto), Options, and Logout. The Options section includes Server Configuration, Self-Signed SSL, CA Signed SSL, Change PIN, Reset Portal, Logout, and Information. Server Status: Provides essential information, including the start time of Nginx and Gunicorn, Listen Port, Server Name, SSL Status, and SSL Certificate details such as Common Name (CN), Organization Name (O), and Expiry Date. Network Health: Displays the Round Trip Time (RTT) to APRS and DAPNET servers, indicating the speed at which data can transfer between your system and their servers. Server Configuration (Only if nginx & certbot installed) The server configuration allows you to modify a2d's default server settings. a2d's default settings include Listen Port: 9331, Server Name: _, and SSL disabled. These settings have the potential to override your existing NGINX configuration, particularly if NGINX is configured for another application. If you are using NGINX for another application, it is strongly recommended to manually configure NGINX for a2d. Desired Listen Port: You can choose the port number for a2d access. For standard HTTP, it's port 80, and for HTTPS, it's 443. Alternatively, you can select any other open port on your system. After changing the port, you'll need to access a2d using the specified port. Desired Server Name: You can set the server name to match your desired domain name. Ensure that the server name corresponds to your domain name, especially if you've enabled SSL, as it should match the Common Name (CN) in the SSL certificate. Choosing SSL Certificates: a2d offers the option to create and use either Self-Signed SSL or Certificate Authority (CA) SSL certificates for your convenience. The difference between them is the appearance of a green lock symbol in the browser when you access them. Ensure that your server name matches the CN in your certificate before making a choice. Before selecting an SSL option, you need to create the certificates. Creating Self-Signed SSL Certificate: In a2d, you can create and store one self-signed SSL certificate. There's no limit to how many times you can create it. You can generate it through the \"Self Signed SSL\" link in the navigation bar or by clicking the green \"Self Signed SSL\" button inside Server Configuration. Self-Signed SSL certificates are not verified, so you'll encounter an SSL security warning when accessing a2d in a web browser. You'll need to bypass this warning to access a2d once Self-Signed SSL is enabled. Once you enabled SSL certificate access a2d through HTTPS. Creating CA SSL Certificate: a2d offers the option to create CA SSL certificates directly through certbot and Let's Encrypt within the a2d portal. You can create them via the \"CA Signed SSL\" link in the navigation bar or by clicking the green \"CA Signed SSL\" button inside Server Configuration. You can generate as many CA Signed SSL certificates as needed. Ensure that the Common Name (CN) matches your domain name. Once you've created your desired SSL certificate, you can return to Server Configuration to set it for a2d. After certificate creation, a2d uses certbot for auto-renewal. If you no longer need CA SSL certificates, a2d provides an option to delete them by clicking \"Delete CA SSL\" in the CA Signed SSL and selecting the certificate to remove. Please note that Let's Encrypt has a limit on duplicate certificates. For more details, refer to Let's Encrypt's documentation . Firewall Settings: Understanding your firewall settings is crucial. Carefully open the necessary ports on your router to achieve the following: 1. Access a2d from outside your network. 2. Generate CA SSL certificates. Let's Encrypt will use ports 80 and 443 to validate your server before issuing the certificate. If you have both IPv4 and IPv6, it's strongly recommended to open required ports for both IPv4 and IPv6. After generating certificates you can safely close them and leave 443 open if you want remove access to a2d outside of your network. In case you are unable to open the ports for some reason and cannot generate Let's Encrypt certificates using the a2d portal, you can perform these tasks via the command line and adjust your DNS settings on your provider's website. For certbot user guide, visit the Certbot user guide . Resetting a2d portal a2d provides a Reset Portal option that allows you to reset the portal and delete SSL certificates, if desired. You need to enter correct passphrase to reset the portal. You can choose to retain the SSL certificates during the factory reset. The Reset Portal option is available in the server page's options. This action will delete all user files, configurations, and data. If you are accessing a2d via SSL during the reset, the server settings will revert to the default a2d settings, and you will need to access a2d through HTTP port 9331 after the reset.","title":"Server Settings"},{"location":"usage/srv.html#server-page-overview","text":"Navigation Bar: Convenient links and icons for easy navigation are available, allowing you to access sections like Dashboard, Mode (Light, Dark, and Auto), Options, and Logout. The Options section includes Server Configuration, Self-Signed SSL, CA Signed SSL, Change PIN, Reset Portal, Logout, and Information. Server Status: Provides essential information, including the start time of Nginx and Gunicorn, Listen Port, Server Name, SSL Status, and SSL Certificate details such as Common Name (CN), Organization Name (O), and Expiry Date. Network Health: Displays the Round Trip Time (RTT) to APRS and DAPNET servers, indicating the speed at which data can transfer between your system and their servers.","title":"Server Page Overview"},{"location":"usage/srv.html#server-configuration-only-if-nginx-certbot-installed","text":"The server configuration allows you to modify a2d's default server settings. a2d's default settings include Listen Port: 9331, Server Name: _, and SSL disabled. These settings have the potential to override your existing NGINX configuration, particularly if NGINX is configured for another application. If you are using NGINX for another application, it is strongly recommended to manually configure NGINX for a2d.","title":"Server Configuration (Only if nginx &amp; certbot installed)"},{"location":"usage/srv.html#desired-listen-port","text":"You can choose the port number for a2d access. For standard HTTP, it's port 80, and for HTTPS, it's 443. Alternatively, you can select any other open port on your system. After changing the port, you'll need to access a2d using the specified port.","title":"Desired Listen Port:"},{"location":"usage/srv.html#desired-server-name","text":"You can set the server name to match your desired domain name. Ensure that the server name corresponds to your domain name, especially if you've enabled SSL, as it should match the Common Name (CN) in the SSL certificate.","title":"Desired Server Name:"},{"location":"usage/srv.html#choosing-ssl-certificates","text":"a2d offers the option to create and use either Self-Signed SSL or Certificate Authority (CA) SSL certificates for your convenience. The difference between them is the appearance of a green lock symbol in the browser when you access them. Ensure that your server name matches the CN in your certificate before making a choice. Before selecting an SSL option, you need to create the certificates.","title":"Choosing SSL Certificates:"},{"location":"usage/srv.html#creating-self-signed-ssl-certificate","text":"In a2d, you can create and store one self-signed SSL certificate. There's no limit to how many times you can create it. You can generate it through the \"Self Signed SSL\" link in the navigation bar or by clicking the green \"Self Signed SSL\" button inside Server Configuration. Self-Signed SSL certificates are not verified, so you'll encounter an SSL security warning when accessing a2d in a web browser. You'll need to bypass this warning to access a2d once Self-Signed SSL is enabled. Once you enabled SSL certificate access a2d through HTTPS.","title":"Creating Self-Signed SSL Certificate:"},{"location":"usage/srv.html#creating-ca-ssl-certificate","text":"a2d offers the option to create CA SSL certificates directly through certbot and Let's Encrypt within the a2d portal. You can create them via the \"CA Signed SSL\" link in the navigation bar or by clicking the green \"CA Signed SSL\" button inside Server Configuration. You can generate as many CA Signed SSL certificates as needed. Ensure that the Common Name (CN) matches your domain name. Once you've created your desired SSL certificate, you can return to Server Configuration to set it for a2d. After certificate creation, a2d uses certbot for auto-renewal. If you no longer need CA SSL certificates, a2d provides an option to delete them by clicking \"Delete CA SSL\" in the CA Signed SSL and selecting the certificate to remove. Please note that Let's Encrypt has a limit on duplicate certificates. For more details, refer to Let's Encrypt's documentation .","title":"Creating CA SSL Certificate:"},{"location":"usage/srv.html#firewall-settings","text":"Understanding your firewall settings is crucial. Carefully open the necessary ports on your router to achieve the following: 1. Access a2d from outside your network. 2. Generate CA SSL certificates. Let's Encrypt will use ports 80 and 443 to validate your server before issuing the certificate. If you have both IPv4 and IPv6, it's strongly recommended to open required ports for both IPv4 and IPv6. After generating certificates you can safely close them and leave 443 open if you want remove access to a2d outside of your network. In case you are unable to open the ports for some reason and cannot generate Let's Encrypt certificates using the a2d portal, you can perform these tasks via the command line and adjust your DNS settings on your provider's website. For certbot user guide, visit the Certbot user guide .","title":"Firewall Settings:"},{"location":"usage/srv.html#resetting-a2d-portal","text":"a2d provides a Reset Portal option that allows you to reset the portal and delete SSL certificates, if desired. You need to enter correct passphrase to reset the portal. You can choose to retain the SSL certificates during the factory reset. The Reset Portal option is available in the server page's options. This action will delete all user files, configurations, and data. If you are accessing a2d via SSL during the reset, the server settings will revert to the default a2d settings, and you will need to access a2d through HTTP port 9331 after the reset.","title":"Resetting a2d portal"}]}